from config import TOKEN
import text

import re
import sqlite3 as sq
from aiogram import types, Dispatcher, executor, Bot
import aiohttp
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.markdown import hlink
import datetime
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


storage = MemoryStorage()
bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=storage)
conn = sq.connect('TG_BOT_MATRIX.db')
cursor = conn.cursor()


#–ú–µ–Ω—é—à–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
get_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)

item1 = types.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è‚öô')
item2 = types.KeyboardButton('–Ø –≤–æ–¥–∏—Ç–µ–ª—åüöò')
item3 = types.KeyboardButton('–Ø –ø–æ–ø—É—Ç—á–∏–∫üßçüèªüéí')
get_kb.add(item1, item2, item3)

xyi = types.ReplyKeyboardMarkup(resize_keyboard=True)
xyi.row("–Ω–∞ –ì–ª–∞–≤–Ω—É—é")


@dp.message_handler(commands=['–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫', '–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ'], state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):

    await state.finish()
    await message.reply('–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!', reply_markup=get_kb)


@dp.message_handler(text="–Ω–∞ –ì–ª–∞–≤–Ω—É—é")
async def with_puree(message: types.Message, state: FSMContext):
    await message.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=get_kb)
    await state.finish()


async def send_message_to_user(user_id: int, text: str):
    await bot.send_message(user_id, text)


@dp.message_handler(commands=['start'])
async def startap(message: types.Message):

    user_name = message.from_user.first_name
    await bot.send_sticker(message.from_user.id, sticker= "CAACAgIAAxkBAAEENjxl_IUljeYelBgwsc8ONsw8YzWRgAACkgEAAladvQqf0C0IQi7VBTQE" )
    await message.reply(f'<em>–ü—Ä–∏–≤–µ—Ç,{user_name}üëãüèª\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤</em>', parse_mode='HTML', reply_markup = get_kb)


@dp.message_handler(text="–Ø –≤–æ–¥–∏—Ç–µ–ª—åüöò")
async def vodila(message: types.Message):
    global keyboard_vod
    keyboard_vod = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard_vod.row("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–µ–∑–¥–∫—Éüìù")
    keyboard_vod.row("–ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏üó∫", "–úo–π –ø—Ä–æ—Ñ–∏–ª—åüîê")
    keyboard_vod.row("–Ω–∞ –ì–ª–∞–≤–Ω—É—é")

    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é‚¨áÔ∏è', reply_markup=keyboard_vod)


@dp.message_handler(text="–úo–π –ø—Ä–æ—Ñ–∏–ª—åüîê")
async def vodila_profile(message: types.Message):
    global keyboard_vod_profile
    keyboard_vod_profile = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard_vod_profile.row("–Ω–∞ –ì–ª–∞–≤–Ω—É—é")

    await message.reply('‚úÖ–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:  \n \n'
                        '–§–ò–û: [–¥–∞–Ω–Ω—ã–µ –æ –≤–æ–¥–∏—Ç–µ–ª–µ] \n  \n'
                        '–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: [–¥–¥.–º–º.–≥–≥–≥–≥]  \n \n'
                        '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: [00000000000] \n \n'
                        '–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:  \n \n'
                        '–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: [‚Ä¶]  \n \n'
                        '–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è: [‚Ä¶]  \n \n'
                        '–ì–æ—Å.–Ω–æ–º–µ—Ä: [–§000–§–§]  \n \n'
                        '–°—Ç–∞–∂ –≤–æ–∂–¥–µ–Ω–∏—è: [00]  \n \n'
                        '–§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è [‚Ä¶]', reply_markup=keyboard_vod_profile)


@dp.message_handler(text="–ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏üó∫")
async def vodila_trip(message: types.Message):
    global keyboard_vod_trip
    keyboard_vod_trip = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard_vod_trip.row("–Ω–∞ –ì–ª–∞–≤–Ω—É—é")

    await message.reply('–í–∞—à–∏ –ø–æ–µ–∑–¥–∫–∏:', reply_markup=keyboard_vod_trip)


class CreateTripStates(StatesGroup):
    waiting_for_createtrip_point_departure = State()
    waiting_for_createtrip_point_arrival = State()
    waiting_for_createtrip_date_departure = State()
    waiting_for_createtrip_time_departure = State()
    waiting_for_createtrip_time_arrival = State()
    waiting_for_createtrip_number_of_seats = State()
    waiting_for_createtrip_extra_options = State()
    waiting_for_createtrip_savecreate = State()


class ProfileStatesGroup(StatesGroup):
    name = State()
    surname = State()
    otchestvo = State()
    date_of_birth = State()
    phone_number = State()
    photo = State()
    edit = State()
    photo_edit = State()


@dp.message_handler(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–µ–∑–¥–∫—Éüìù")
async def Create_trip(message: types.Message, state: FSMContext):

    global keyboard_create_trip
    keyboard_create_trip = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard_create_trip.row("–Ω–∞ –ì–ª–∞–≤–Ω—É—é")

    await message.answer('üìç–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', reply_markup=keyboard_create_trip)

    await CreateTripStates.waiting_for_createtrip_point_departure.set()


@dp.message_handler(state=CreateTripStates.waiting_for_createtrip_point_departure)
async def Create_trip_point_departure (message: types.Message, state: FSMContext):
    if message.text == "–Ω–∞ –ì–ª–∞–≤–Ω—É—é":
        await message.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=get_kb)
        await state.finish()
    else:
        async with state.proxy() as data:
            data['Create_trip_departure'] = message.text
        await message.answer("üìç–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–∫—É –ø—Ä–∏–±—ã—Ç–∏—è:")
        await CreateTripStates.waiting_for_createtrip_point_arrival.set()


@dp.message_handler(state=CreateTripStates.waiting_for_createtrip_point_arrival)
async def Create_trip_point_arrival (message: types.Message, state: FSMContext):
    if message.text == "–Ω–∞ –ì–ª–∞–≤–Ω—É—é":
        await message.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=get_kb)
        await state.finish()
    else:
        async with state.proxy() as data:
            data['Create_trip_arrival'] = message.text
        await message.answer("üìÜ–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏:", reply_markup=get_date_keyboard())
        await CreateTripStates.waiting_for_createtrip_date_departure.set()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('date_'), state=CreateTripStates.waiting_for_createtrip_date_departure)
async def Create_trip_date(callback_query: CallbackQuery, state: FSMContext):
    date_str = callback_query.data[5:]
    async with state.proxy() as data:
        data['Create_trip_date_departure'] = date_str
    await CreateTripStates.waiting_for_createtrip_time_departure.set()
    await bot.send_message(callback_query.from_user.id, f'üìÜ–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date_str}')
    await bot.send_message(callback_query.from_user.id, '‚è∞–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:')



@dp.message_handler(state=CreateTripStates.waiting_for_createtrip_time_departure)
async def Create_trip_time_departure (message: types.Message, state: FSMContext):
    if message.text == "–Ω–∞ –ì–ª–∞–≤–Ω—É—é":
        await message.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=get_kb)
        await state.finish()
    else:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –£–ë–†–ê–¢–¨:")
        async with state.proxy() as data:
            data['Create_trip_time_departure'] = message.text
        await  CreateTripStates.waiting_for_createtrip_time_arrival.set()


@dp.message_handler(state=CreateTripStates.waiting_for_createtrip_time_arrival)
async def Create_trip_time_arrive(message: types.Message, state: FSMContext):
    if message.text == "–Ω–∞ –ì–ª–∞–≤–Ω—É—é":
        await message.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=get_kb)
        await state.finish()
    else:
        async with state.proxy() as data:
            data['Create_trip_time_arrive'] = message.text

        global keyboard_vod_number_of_seats
        keyboard_vod_number_of_seats = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in range(1, 6, 2):
            keyboard_vod_number_of_seats.row(f'{i}',f'{i + 1}')
        keyboard_vod_number_of_seats.row('–Ω–∞ –ì–ª–∞–≤–Ω—É—é')

        await message.answer('‚ùó–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:', reply_markup=keyboard_vod_number_of_seats)

        await  CreateTripStates.waiting_for_createtrip_number_of_seats.set()


@dp.message_handler(state=CreateTripStates.waiting_for_createtrip_number_of_seats)
async def Create_trip_number_of_seats(message: types.Message, state: FSMContext):
    if message.text == "–Ω–∞ –ì–ª–∞–≤–Ω—É—é":
        await message.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=get_kb)
        await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        async with state.proxy() as data:
            data['Create_trip_number_of_seats'] = message.text
        global keyboard_vod_extra_options
        keyboard_vod_extra_options = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard_vod_extra_options.row('–ú–æ–∂–Ω–æ –∫—É—Ä–∏—Ç—åüö¨', '–ù–∞–ª–∏—á–∏–µ –±–∞–≥–∞–∂–∞üéí')
        keyboard_vod_extra_options.row('–ü—Ä–æ–≤–æ–∑ —Å –∂–∏–≤–æ—Ç–Ω—ã–ºüêà', '–†–µ–±–µ–Ω–æ–∫ –¥–æ 12 –ª–µ—Çü§±')
        keyboard_vod_extra_options.row('–Ω–∞ –ì–ª–∞–≤–Ω—É—é','–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å‚û°Ô∏è')

        await message.answer('‚öôÔ∏è–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:', reply_markup=keyboard_vod_extra_options)

        await  CreateTripStates.waiting_for_createtrip_extra_options.set()


@dp.message_handler(state=CreateTripStates.waiting_for_createtrip_extra_options)
async def Create_trip_extra_options(message: types.Message, state: FSMContext):

    if message.text == "–Ω–∞ –ì–ª–∞–≤–Ω—É—é":
        await message.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=get_kb)
        await state.finish()
    else:

        if message.text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å‚û°Ô∏è":
            async with state.proxy() as data:
                data['Create_trip_extra_options'] = message.text
        else:
            async with state.proxy() as data:
                data['Create_trip_extra_options'] = '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'

        global keyboard_create_trip
        keyboard_create_trip = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard_create_trip.row('–Ω–∞ –ì–ª–∞–≤–Ω—É—é', '–°–æ–∑–¥–∞—Ç—å‚úÖ')

        await message.answer('–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–µ–∑–¥–∫—É? \n\n'
                             f'üìç–¢–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {data["Create_trip_departure"]}\n\n'
                             f'üìç–¢–æ—á–∫–∞ –ø—Ä–∏–±—ã—Ç–∏—è: {data["Create_trip_arrival"]}\n\n'
                             f'üìÜ–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {data["Create_trip_date_departure"]}\n\n'
                             f'‚è∞–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {data["Create_trip_time_departure"]}\n\n'
                             f'–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –£–ë–†–ê–¢–¨: {data["Create_trip_time_arrive"]}\n\n'
                             f'‚ùó–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç: {data["Create_trip_number_of_seats"]}\n\n'
                             f'‚öô–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏: {data["Create_trip_extra_options"]}', reply_markup=keyboard_create_trip)

        await CreateTripStates.waiting_for_createtrip_savecreate.set()


@dp.message_handler(state=CreateTripStates.waiting_for_createtrip_savecreate)
async def Create_trip_save(message: types.Message, state: FSMContext):
    if message.text == "–°–æ–∑–¥–∞—Ç—å‚úÖ":
        await message.reply('–í–∞—à–∞ –ø–æ–µ–∑–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', reply_markup=get_kb)
        await state.finish()
    elif message.text == "–Ω–∞ –ì–ª–∞–≤–Ω—É—é":
        await message.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é', reply_markup=get_kb)
        await state.finish()
    else: return 0


@dp.message_handler(text="–Ø –ø–æ–ø—É—Ç—á–∏–∫üßçüèªüéí")
async def poputchki(message: types.Message):
    global keyboard_pop
    keyboard_pop = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard_pop.row("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—åüîê")
    keyboard_pop.row("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–µ–∑–¥–æ–∫üó∫", "–ù–∞–π—Ç–∏ –ø–æ–µ–∑–¥–∫—Éüîç")
    keyboard_pop.row("–Ω–∞ –ì–ª–∞–≤–Ω—É—é")

    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é‚¨áÔ∏è', reply_markup=keyboard_pop)


def execute_sql_query(query):
    cursor.execute(query)
    result = cursor.fetchall()
    return result


@dp.message_handler(text="–ò—Å—Ç–æ—Ä–∏—è –ø–æ–µ–∑–¥–æ–∫üó∫")
async def history_of_trips(message: types.Message):
    await message.reply("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–µ–∑–¥–æ–∫:")

    query = """
    SELECT Trip.Departure_date, Trip.Departure, Trip.Destination, 
           Driver.Name, Driver.Surname, Driver.Otchestvo, 
           Cars.Brand, Cars.Model, Cars.Number
    FROM Trip
    JOIN Driver ON Trip.ID_Driver = Driver.ID_Driver
    JOIN Cars ON Driver.Car = Cars.ID_Cars
    """

    trips = execute_sql_query(query)

    if not trips:
        await message.answer("–ò—Å—Ç–æ—Ä–∏–∏ –ø–æ–µ–∑–¥–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –ø–æ–µ–∑–¥–æ–∫ –µ—â–µ –Ω–µ –±—ã–ª–æ.")
    else:
        history_message = ""
        for trip in trips:
            departure_date, departure, destination, name, surname, otchestvo, brand, model, number = trip
            trip_info = (
                f"–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {departure_date}\n"
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑: {departure}\n"
                f"–ü—Ä–∏–±—ã—Ç–∏–µ –≤: {destination}\n"
                f"–í–æ–¥–∏—Ç–µ–ª—å: {name} {surname} {otchestvo}\n"
                f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {brand} {model}\n"
                f"–ì–æ—Å.–Ω–æ–º–µ—Ä: {number}\n\n"
            )
            history_message += trip_info

        await message.answer(history_message)



@dp.message_handler(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—åüîê")
async def my_profile(message: types.Message):
    global user_id
    user_id = message.from_user.id

    cursor.execute("SELECT * FROM passenger WHERE id_passenger = ?", (user_id,))
    data = cursor.fetchone()

    if data is None:
        await message.answer(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥–∫—É.",
            reply_markup=get_kb)
    else:
        profile_text = f"–ò–º—è: {data[1]}\n" \
                       f"–§–∞–º–∏–ª–∏—è: {data[2]}\n" \
                       f"–û—Ç—á–µ—Å—Ç–≤–æ: {data[3]}\n" \
                       f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data[4]}\n" \
                       f"–¢–µ–ª–µ—Ñ–æ–Ω: {data[5]}"

        if data[6] is not None:
            photo_id = data[6]
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.row("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—åüîÑ", "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å‚ùå")
            keyboard.row("–Ω–∞ –ì–ª–∞–≤–Ω—É—é")
            await message.reply_photo(photo_id, caption=profile_text, reply_markup=keyboard)
        else:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.row("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—åüîÑ", "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å‚ùå")
            keyboard.row("–Ω–∞ –ì–ª–∞–≤–Ω—É—é")
            await message.reply(profile_text, reply_markup=keyboard)


@dp.message_handler(text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å‚ùå")
async def delete_profile(message: types.Message):
    keyboard_confirm = InlineKeyboardMarkup(row_width=2)
    keyboard_confirm.add(
        InlineKeyboardButton("–î–∞", callback_data="confirm_delete"),
        InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_delete")
    )

    await message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å?", reply_markup=keyboard_confirm)


@dp.callback_query_handler(lambda query: query.data == 'confirm_delete')
async def process_confirm_delete(callback_query: types.CallbackQuery):
    cursor.execute("DELETE FROM passenger WHERE id_passenger = ?", (user_id,))
    await callback_query.message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=get_kb)


@dp.callback_query_handler(lambda query: query.data == 'cancel_delete')
async def process_cancel_delete(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_kb)


@dp.message_handler(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—åüîÑ")
async def edit_profile(message: types.Message):
    global user_id
    user_id = message.from_user.id

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ò–º—è", callback_data="edit_name"),
        InlineKeyboardButton("–§–∞–º–∏–ª–∏—è", callback_data="edit_surname"),
        InlineKeyboardButton("–û—Ç—á–µ—Å—Ç–≤–æ", callback_data="edit_otchstvo"),
        InlineKeyboardButton("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="edit_date_of_birth"),
        InlineKeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_phone_number"),
        InlineKeyboardButton("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", callback_data="edit_photo")
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith('edit_'))
async def process_callback_edit_profile(callback_query: types.CallbackQuery, state: FSMContext):
    edit_type = callback_query.data.split("_")[1]
    await state.update_data(edit_type=edit_type)

    if edit_type == 'photo':
        await process_photo_edit_input(callback_query.message, state)
    else:
        await callback_query.message.answer(f"–•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {edit_type}:")
        await ProfileStatesGroup.edit.set()


async def save_new_photo(photo_id, conn):
    cursor = conn.cursor()
    cursor.execute("UPDATE passenger SET photo = ? WHERE id_passenger = ?", (photo_id, user_id))
    conn.commit()


async def process_photo_edit_input(message: types.Message, state: FSMContext) -> None:
    keyboard_photo_edit = InlineKeyboardMarkup(row_width=1)
    skip_edit_button = InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo_edit")
    keyboard_photo_edit.add(skip_edit_button)

    await message.answer("–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', "
                         "—á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:", reply_markup=keyboard_photo_edit)

    await ProfileStatesGroup.photo_edit.set()


@dp.message_handler(content_types=types.ContentType.PHOTO, state=ProfileStatesGroup.photo_edit)
async def load_all(message: types.Message, state: FSMContext) -> None:
    photo_id = message.photo[-1].file_id
    await save_new_photo(photo_id, conn)
    await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=get_kb)
    await state.finish()

    await ask_for_additional_edit(message)


@dp.callback_query_handler(lambda query: query.data == 'skip_photo_edit', state=ProfileStatesGroup.photo_edit)
async def skip_photo_callback(query: types.CallbackQuery, state: FSMContext):
    await query.answer()

    async with state.proxy() as data:
        photo_id = None
        cursor.execute("UPDATE passenger SET photo = ? WHERE id_passenger = ?", (photo_id, user_id))
        conn.commit()

    await query.message.answer('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.')
    await state.finish()

    await ask_for_additional_edit(query.message)


@dp.message_handler(state=ProfileStatesGroup.edit)
async def process_edit_input(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        edit_type = data['edit_type']
        print(edit_type)
    if edit_type == 'name':
        await save_new_name(message.text, message.from_user.id, conn)
        await message.answer(f"–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {message.text}", reply_markup=get_kb)

    elif edit_type == 'surname':
        await save_new_surname(message.text, message.from_user.id, conn)
        await message.answer(f"–§–∞–º–∏–ª–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {message.text}", reply_markup=get_kb)

    elif edit_type == 'otchstvo':
        await save_new_otchstvo(message.text, message.from_user.id, conn)
        await message.answer(f"–û—Ç—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {message.text}", reply_markup=get_kb)

    elif edit_type == 'date':
        await save_new_date_of_birth(message.text, message.from_user.id, conn)
        await message.answer(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {message.text}", reply_markup=get_kb)

    elif edit_type == 'phone':
        await save_new_phone_number(message.text, message.from_user.id, conn)
        await message.answer(f"–¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {message.text}", reply_markup=get_kb)

    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    await state.finish()

    await ask_for_additional_edit(message)


async def save_new_name(name: str, user_id: int, conn) -> None:
    if not name or len(name) < 2:
        raise ValueError("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")

    cursor.execute("UPDATE passenger SET name = ? WHERE id_passenger = ?", (name, user_id))
    conn.commit()


async def save_new_surname(surname: str, user_id: int, conn) -> None:
    if not surname or len(surname) < 2:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è.")

    cursor.execute("UPDATE passenger SET surname = ? WHERE id_passenger = ?", (surname, user_id))
    conn.commit()


async def save_new_otchstvo(otchstvo: str, user_id: int, conn) -> None:
    if not otchstvo or len(otchstvo) < 2:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ.")

    cursor.execute("UPDATE passenger SET otchestvo = ? WHERE id_passenger = ?", (otchstvo, user_id))
    conn.commit()


async def save_new_date_of_birth(date_of_birth: str, user_id: int, conn) -> None:
    date_of_birth_pattern = re.compile(r'\d{2}\.\d{2}\.\d{4}')
    if not re.match(date_of_birth_pattern, date_of_birth):
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥")

    cursor.execute("UPDATE passenger SET date_of_birth = ? WHERE id_passenger = ?", (date_of_birth, user_id))
    conn.commit()


async def save_new_phone_number(phone_number: str, user_id: int, conn) -> None:
    phone_number_pattern = re.compile(r'(?:\+7|8) \d{3} \d{3} \d{2} \d{2}')
    if not re.match(phone_number_pattern, phone_number):
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 000 000 00 00 –∏–ª–∏ 8 000 000 00 00")

    cursor.execute("UPDATE passenger SET phone_number = ? WHERE id_passenger = ?", (phone_number, user_id))
    conn.commit()


async def ask_for_additional_edit(message: types.Message):
    keyboard_additional_edit = InlineKeyboardMarkup(row_width=2)
    keyboard_additional_edit.add(
        InlineKeyboardButton("–î–∞", callback_data="additional_edit_yes"),
        InlineKeyboardButton("–ù–µ—Ç", callback_data="additional_edit_no")
    )

    await message.answer("–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ?", reply_markup=keyboard_additional_edit)


@dp.callback_query_handler(lambda query: query.data == 'additional_edit_yes')
async def process_additional_edit_yes(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.delete_reply_markup()
    await edit_profile(callback_query.message)


@dp.callback_query_handler(lambda query: query.data == 'additional_edit_no')
async def process_additional_edit_no(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í—Å–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", reply_markup=get_kb)


class MyStates(StatesGroup):
    waiting_for_departure = State()
    waiting_for_arrival = State()
    waiting_for_date = State()
    waiting_for_options = State()
    waiting_for_seats = State()
    waiting_for_more_options = State()


async def get_city_from_coordinates(latitude, longitude):
    async with aiohttp.ClientSession() as session:
        async with session.get(f'https://geocode-maps.yandex.ru/1.x/?apikey=56149205-ee42-4366-8885-0d8467b54c9a&format=json&geocode={longitude},{latitude}') as response:
            data = await response.json()
            try:
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
                geo_objects = data['response']['GeoObjectCollection']['featureMember']
                for obj in geo_objects:
                    if 'GeoObject' in obj:
                        geo_object = obj['GeoObject']
                        if 'metaDataProperty' in geo_object and 'GeocoderMetaData' in geo_object['metaDataProperty']:
                            geocoder_meta_data = geo_object['metaDataProperty']['GeocoderMetaData']
                            if 'kind' in geocoder_meta_data and geocoder_meta_data['kind'] == 'locality':
                                city = geo_object['name']
                                return city
                return None
            except (KeyError, IndexError):
                return None


@dp.message_handler(text="–ù–∞–π—Ç–∏ –ø–æ–µ–∑–¥–∫—Éüîç")
async def find_trip(message: types.Message):
    await message.answer("üìç–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await MyStates.waiting_for_departure.set()


@dp.message_handler(content_types=types.ContentType.LOCATION, state=MyStates.waiting_for_departure)
async def handle_location(message: types.Message, state: FSMContext):
    location = message.location
    latitude = location.latitude
    longitude = location.longitude

    city = await get_city_from_coordinates(latitude, longitude)

    if city:
        await state.update_data(departure_city=city)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await message.answer(f"üöó –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {city}", reply_markup=get_kb)
        await message.answer("üìç–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–∫—É –ø—Ä–∏–±—ã—Ç–∏—è:")
        await MyStates.waiting_for_arrival.set()
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")


@dp.message_handler(state=MyStates.waiting_for_departure)
async def set_departure(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['departure'] = message.text
    await message.answer("üìç–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–∫—É –ø—Ä–∏–±—ã—Ç–∏—è:")
    global user_id
    user_id = message.from_user.id
    await MyStates.waiting_for_arrival.set()


@dp.callback_query_handler(lambda c: c.data.startswith('date_'), state=MyStates.waiting_for_date)
async def process_date(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    date = callback_query.data.split('_')[1]
    await state.update_data(date=date)
    await state.update_data(selected_date=date)
    await callback_query.message.answer(f"üìÜ–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏ –≤—ã–±—Ä–∞–Ω–∞: {date}", reply_markup=xyi)
    global options_keyboard
    options_keyboard = InlineKeyboardMarkup(row_width=1)
    kur = types.InlineKeyboardButton(text='–ú–æ–∂–Ω–æ –∫—É—Ä–∏—Ç—åüö¨', callback_data='kur')
    bag = types.InlineKeyboardButton(text='–ù–∞–ª–∏—á–∏–µ –±–∞–≥–∞–∂–∞üéí', callback_data='bag')
    pri = types.InlineKeyboardButton(text='–ü—Ä–æ–≤–æ–∑ —Å –∂–∏–≤–æ—Ç–Ω—ã–ºüêà', callback_data='pri')
    reb = types.InlineKeyboardButton(text='–†–µ–±–µ–Ω–æ–∫ –¥–æ 12 –ª–µ—Çü§±', callback_data='reb')
    prop = types.InlineKeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å‚û°Ô∏è', callback_data='prop')
    options_keyboard.add(kur, bag, pri, reb, prop)

    await callback_query.message.answer("‚öôÔ∏è–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:", reply_markup=options_keyboard)
    await MyStates.waiting_for_options.set()


selected_options = set()


@dp.callback_query_handler(lambda c: c.data in ['kur', 'bag', 'pri', 'reb', 'prop'], state=MyStates.waiting_for_options)
async def process_option(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    if callback_query.data == 'prop':
        await callback_query.message.answer("–í—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç‚û°Ô∏è")
        await set_seats(callback_query.message, state)

    else:
        option_text = {
            'kur': '–ú–æ–∂–Ω–æ –∫—É—Ä–∏—Ç—åüö¨',
            'bag': '–ù–∞–ª–∏—á–∏–µ –±–∞–≥–∞–∂–∞üéí',
            'pri': '–ü—Ä–æ–≤–æ–∑ —Å –∂–∏–≤–æ—Ç–Ω—ã–ºüêà',
            'reb': '–†–µ–±–µ–Ω–æ–∫ –¥–æ 12 –ª–µ—Çü§±'
        }
        option = callback_query.data
        selected_options.add(option)
        await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é: {option_text[option]}")
        await ask_for_more_options(callback_query.message, option_text, state)

        await MyStates.waiting_for_more_options.set()


async def ask_for_more_options(message: types.Message, option_text, state: FSMContext):
    if len(selected_options) == len(option_text):
        await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
        await MyStates.waiting_for_seats.set()
        await set_seats(message, state)
        return

    keyboard = types.InlineKeyboardMarkup()
    yes_button = types.InlineKeyboardButton("–î–∞", callback_data="more_options_yes")
    no_button = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="more_options_no")
    keyboard.add(yes_button, no_button)

    await message.answer("–ù—É–∂–Ω—ã –µ—â–µ –æ–ø—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è?", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data in ['more_options_yes', 'more_options_no'],
                           state=MyStates.waiting_for_more_options)
async def process_more_options_decision(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)

    if callback_query.data == 'more_options_yes':
        option_text = {
            'kur': '–ú–æ–∂–Ω–æ –∫—É—Ä–∏—Ç—åüö¨',
            'bag': '–ù–∞–ª–∏—á–∏–µ –±–∞–≥–∞–∂–∞üéí',
            'pri': '–ü—Ä–æ–≤–æ–∑ —Å –∂–∏–≤–æ—Ç–Ω—ã–ºüêà',
            'reb': '–†–µ–±–µ–Ω–æ–∫ –¥–æ 12 –ª–µ—Çü§±'
        }
        keyboard = InlineKeyboardMarkup(row_width=1)
        for btn in [types.InlineKeyboardButton(text=text, callback_data=data) for data, text in option_text.items() if data not in selected_options]:
            keyboard.insert(btn)

        await callback_query.message.answer("‚öôÔ∏è–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:", reply_markup=keyboard)
        await MyStates.waiting_for_options.set()

    elif callback_query.data == 'more_options_no':
        await MyStates.waiting_for_seats.set()
        await set_seats(callback_query.message, state)


class Passenger:
    def __init__(self, user_id, name, age, description, photo):
        self.user_id = user_id
        self.name = name
        self.age = age
        self.description = description
        self.photo = photo


async def save_passenger_data(data, message):
    errors = []

    try:
        if not data.get('name') or len(data['name']) < 2:
            errors.append("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
        if not data.get('surname') or len(data['surname']) < 2:
            errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è.")
        if not data.get('otchestvo') or len(data['otchestvo']) < 2:
            errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ.")

        date_of_birth_pattern = re.compile(r'\d{2}\.\d{2}\.\d{4}')
        if not re.match(date_of_birth_pattern, data['date_of_birth']):
            errors.append("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è.")

        phone_number_pattern = re.compile(r'(?:\+7|8) \d{3} \d{3} \d{2} \d{2}')
        if not re.match(phone_number_pattern, data['phone_number']):
            errors.append("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

        if errors:
            error_message = "\n".join(errors)
            await message.answer(f"–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–æ–∏–∑–æ—à–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –æ—à–∏–±–∫–∏:\n{error_message}\n–í–∞—Å –≤–µ—Ä–Ω—É–ª–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_kb)
            return

        conn.execute("INSERT INTO passenger (id_passenger, name, surname, otchestvo, date_of_birth, phone_number, photo)"
                    " VALUES (?, ?, ?, ?, ?, ?, ?)",
                    (data['id_passenger'], data['name'], data['surname'], data['otchestvo'], data['date_of_birth'],
                     data['phone_number'], data['photo']))
        conn.commit()

        await message.answer('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', reply_markup=get_kb)

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


@dp.message_handler(state=MyStates.waiting_for_seats)
async def set_seats(message: types.Message, state: FSMContext):

    cursor.execute("SELECT * FROM passenger WHERE id_passenger = ?", (user_id,))
    data = cursor.fetchone()

    if data is None:
        await message.answer("–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–µ–±–µ –ø—Ä–æ—Ñ–∏–ª—å!\n–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:", reply_markup=get_cancel_kb())
        async with state.proxy() as data:
            data['id_passenger'] = user_id

        await ProfileStatesGroup.name.set()
    else:
        await message.answer('–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω', reply_markup=get_kb)
        await state.finish()


@dp.message_handler(state=ProfileStatesGroup.name)
async def load_surname(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:")
    await ProfileStatesGroup.next()


@dp.message_handler(state=ProfileStatesGroup.surname)
async def load_otchestvo(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['surname'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ:")
    await ProfileStatesGroup.next()


@dp.message_handler(state=ProfileStatesGroup.otchestvo)
async def load_date_of_birth(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['otchestvo'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await ProfileStatesGroup.next()


@dp.message_handler(state=ProfileStatesGroup.date_of_birth)
async def load_phone_number(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['date_of_birth'] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í —Ñ–æ—Ä–º–∞—Ç–µ +7 000 000 00 00 –∏–ª–∏ 8 000 000 00 00")
    await ProfileStatesGroup.next()


@dp.callback_query_handler(lambda query: query.data == 'skip_photo', state='*')
async def skip_photo_callback(query: types.CallbackQuery, state: FSMContext):
    await query.answer()

    async with state.proxy() as data:
        data['photo'] = None

    await query.message.answer('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.')
    await state.finish()
    await save_passenger_data(data, query.message)


@dp.message_handler(state=ProfileStatesGroup.phone_number)
async def process_photo(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['phone_number'] = message.text

    keyboard_photo = InlineKeyboardMarkup(row_width=1)
    skip_button = InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")
    keyboard_photo.add(skip_button)

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=keyboard_photo)
    await ProfileStatesGroup.next()


@dp.message_handler(state=ProfileStatesGroup.photo)
@dp.message_handler(content_types=types.ContentType.PHOTO, state="*")
async def load_all(message: types.Message, state: FSMContext) -> None:
    if message.photo:
        async with state.proxy() as data:
            photo_id = message.photo[-1].file_id
            data['photo'] = photo_id
            await save_passenger_data(data, message)
            await state.finish()


def get_cancel_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('/–æ—Ç–º–µ–Ω–∞_—Å–æ–∑–¥–∞–Ω–∏—è'))
    return kb


@dp.message_handler(state=MyStates.waiting_for_arrival)
async def set_arrival(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['arrival'] = message.text
    await message.answer("üìÜ–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏:", reply_markup=get_date_keyboard())
    await MyStates.waiting_for_date.set()


def get_date_keyboard():
    today = datetime.date.today()
    keyboard = InlineKeyboardMarkup(row_width=3)
    for day in range(18):
        current_date = today + datetime.timedelta(days=day)
        keyboard.insert(InlineKeyboardButton(text=current_date.strftime('%d.%m'), callback_data=f"date_{current_date}"))
    return keyboard


@dp.message_handler(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è‚öô")
async def with_instr(message: types.Message):
    global keyboard_markup
    keyboard_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard_markup.row("–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Éüßëüèª‚Äçüíª")
    keyboard_markup.row("–û –ø–æ–ø—É—Ç—á–∏–∫–µ", "–û –≤–æ–¥–∏—Ç–µ–ª–µ")
    keyboard_markup.row("–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")
    keyboard_markup.row("–Ω–∞ –ì–ª–∞–≤–Ω—É—é")

    await message.reply('–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ç—Å—Ä—É–∫—Ü–∏–µ–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Telegram-–±–æ—Ç–∞'
                        , reply_markup=keyboard_markup)


@dp.message_handler(text="–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")
async def faq(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç—ã–π –≤–æ–ø—Ä–æ—Å‚¨áÔ∏è:")
    faq_list = [
        {"text": "‚ùì–ö–æ–≥–¥–∞ –∏ –≥–¥–µ –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–µ–∑–¥–∫–µ?", "url": "https://telegra.ph/Kogda-i-gde-poyavitsya-informaciya-o-zabronirovannoj-poezdke-04-03-2"},
        {"text": "‚ùì–ó–∞ —Å–∫–æ–ª—å–∫–æ —è –º–æ–≥—É –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–µ–∑–¥–∫—É?", "url": "https://telegra.ph/Za-skolko-ya-mogu-otmenit-zabronirovannuyu-poezdku-04-03"},
        {"text": "‚ùì–ß—Ç–æ –¥–µ–ª–∞—Ç—å –≤ —Å–ª—É—á–∞–µ –æ–ø–æ–∑–¥–∞–Ω–∏—è –∫ –º–µ—Å—Ç—É –ø–æ—Å–∞–¥–∫–∏?", "url": "https://telegra.ph/CHto-delat-v-sluchae-opozdaniya-k-mestu-posadki-04-03"},
        {"text": "‚ùì–ö–∞–∫ —É–∑–Ω–∞—Ç—å –æ—Ç–∫—É–¥–∞ –±—É–¥–µ—Ç –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è?", "url": "https://telegra.ph/CHto-delat-v-sluchae-opozdaniya-k-mestu-posadki-04-03"},
        {"text": "‚ùì–ú–æ–≥—É –ª–∏ —è —Å—Ç–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–º, –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ —è –±—ã–ª –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º (–ø–æ–ø—É—Ç—á–∏–∫–æ–º)?", "url": "https://telegra.ph/Mogu-li-ya-stat-voditelem-esli-ranee-ya-byl-passazhirom-poputchikom-04-03"},
        {"text": "‚ùì–ú–æ–≥—É –ª–∏ —è –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π —Å–≤–æ–π –≤–µ–ª–æ—Å–∏–ø–µ–¥/–¥–æ–º–∞—à–Ω–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞/–∫—Ä—É–ø–Ω—ã–π –±–∞–≥–∞–∂?", "url": "https://telegra.ph/Mogu-li-ya-vzyat-s-soboj-svoj-velosipeddomashnego-pitomcakrupnyj-bagazh-04-03"},
        {"text": "‚ùì–ï—Å—Ç—å –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–∞ –∑–∞—Ä–∞–Ω–µ–µ?", "url": "https://telegra.ph/Est-li-vozmozhnost-zabronirovat-mesta-zaranee-04-03"},
        {"text": "‚ùì–ú–æ–∂–µ–º –ª–∏ –º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –≥–¥–µ-–Ω–∏–±—É–¥—å –ø–æ –ø—É—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–∫—É—Å–∞ –∏–ª–∏ –æ—Ç–¥—ã—Ö–∞?", "url": "https://telegra.ph/Mozhem-li-my-ostanovitsya-gde-nibud-po-puti-dlya-perekusa-ili-otdyha-04-03"},
        {"text": "‚ùì–ú–æ–∂–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫ —Å–∏—Å—Ç–µ–º–µ –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ –∏–ª–∏ –∞—É–¥–∏–æ–∫–Ω–∏–≥?", "url": "https://telegra.ph/Mozhno-li-podklyuchit-mobilnoe-ustrojstvo-k-sisteme-audio-dlya-proslushivaniya-muzyki-ili-audioknig-04-03"},
        {"text": "‚ùì–ö–∞–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥—É—à–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Ä–µ–º–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)", "url": "https://telegra.ph/Kakie-sredstva-bezopasnosti-dostupny-v-avtomobile-naprimer-podushki-bezopasnosti-remni-bezopasnosti-04-03"},
        {"text": "‚ùì–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–π–º–µ—Ç –ø–æ–µ–∑–¥–∫–∞ –¥–æ –º–æ–µ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è?", "url": "https://telegra.ph/Skolko-vremeni-zajmet-poezdka-do-moego-punkta-naznacheniya-04-03"},
        {"text": "‚ùì–ü–æ–µ–∑–¥–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è, –Ω–∞—Å –ø–æ–≤–µ–∑–µ—Ç –Ω–µ–∑–Ω–∞–∫–æ–º—ã–π —á–µ–ª–æ–≤–µ–∫, –∞ —è –Ω–µ –æ–ø–ª–∞—á—É –ø–æ–µ–∑–¥–∫—É, —á—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –º–Ω–µ –Ω–µ–ª–æ–≤–∫–æ?", "url": "https://telegra.ph/Poezdka-besplatnaya-nas-povezet-neznakomyj-chelovek-a-ya-ne-oplachu-poezdku-chto-delat-esli-mne-nelovko-04-03"}
    ]

    response = "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç—ã–π –≤–æ–ø—Ä–æ—Å‚¨áÔ∏è:\n"
    for faq in faq_list:
        response += f"‚Ä¢ [{faq['text']}]({faq['url']})\n"

    await message.reply(response, parse_mode=types.ParseMode.MARKDOWN, disable_web_page_preview=True)



@dp.message_handler()
async def handle_buttons(message: types.Message):
    if message.text == "–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Éüßëüèª‚Äçüíª":
        await message.reply("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç –ø–æ —Å—Å—ã–ª–∫–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ª–Ω—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ "
                            "–í—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –í–∞–º –æ—Ç–≤–µ—Ç—è—Ç! \n –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É —Å "
                            "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏: https://t.me/+JwlBQvFYHX41MGEy ‚úÖ", reply_markup=keyboard_markup)
    elif message.text == "–û –ø–æ–ø—É—Ç—á–∏–∫–µ":
        await message.reply(text.text_poput_ruk, reply_markup=keyboard_markup)
    elif message.text == "–û –≤–æ–¥–∏—Ç–µ–ª–µ":
        await message.reply(text.text_voditel_ruk, reply_markup=keyboard_markup)
    elif message.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ":
        await message.reply("https://telegra.ph/Polzovatelskoe-soglashenie-dlya-Telegram-bota-Servis-poputchikov-04-03", reply_markup=keyboard_markup)


#–ó–∞–ø—É—Å–∫–∞–µ–º
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

    faq_buttons = InlineKeyboardMarkup(row_width=1)
    faq_buttons.add(
        InlineKeyboardButton(text="",
                             url="https://telegra.ph/pelpoldvapldaa-04-03", callback_data="faq_1"),
        InlineKeyboardButton(text="", callback_data="faq_2"),
        InlineKeyboardButton(text="", callback_data="faq_3"),
        InlineKeyboardButton(text="", callback_data="faq_4"),
        InlineKeyboardButton(text="",
                             callback_data="faq_5"),
        InlineKeyboardButton(text="",
                             callback_data="faq_6"),
        InlineKeyboardButton(text="", callback_data="faq_7"),
        InlineKeyboardButton(text="",
                             callback_data="faq_8"),
        InlineKeyboardButton(
            text="",
            callback_data="faq_9"),
        InlineKeyboardButton(
            text="?",
            callback_data="faq_10"),
        InlineKeyboardButton(text="",
                             callback_data="faq_11"),
        InlineKeyboardButton(
            text="",
            callback_data="faq_12"),
    )